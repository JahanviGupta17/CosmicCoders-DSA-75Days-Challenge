## Q9: Pascal's Triangle

Given an integer `numRows`, return the first `numRows` of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

:: Solution

```python
from typing import List

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        triangle = []

        for i in range(numRows):
            row = [1] * (i + 1)
            
            for j in range(1, i):
                row[j] = triangle[i-1][j-1] + triangle[i-1][j]

            triangle.append(row)
            
        return triangle
:: Approach

Initialize an empty list triangle to store rows of Pascal's triangle.
Iterate through each row, starting from the second row.
For each element in the row, calculate the sum of the two numbers directly above it.
:: Complexity

Time Complexity: O(numRows^2) - Quadratic time complexity.
Space Complexity: O(numRows^2) - Quadratic space complexity due to the storage of the entire triangle.
