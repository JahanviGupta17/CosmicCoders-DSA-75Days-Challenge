 Q1: Two Sum

Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.

 :: Solution

from typing import List

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        num_dict = {}  # Dictionary to store numbers and their indices

        for i, num in enumerate(nums):
            complement = target - num

            # Check if the complement is already in the dictionary
            if complement in num_dict:
                return [num_dict[complement], i]

            # If not, add the current number to the dictionary
            num_dict[num] = i

        # If no solution is found
        return None
solution = Solution()

nums1 = [2, 7, 11, 15]
target1 = 9
print(solution.twoSum(nums1, target1))  # Output: [0, 1]

nums2 = [3, 2, 4]
target2 = 6
print(solution.twoSum(nums2, target2))  # Output: [1, 2]

nums3 = [3, 3]
target3 = 6
print(solution.twoSum(nums3, target3))  # Output: [0, 1]

:: Approach
Utilize a dictionary (num_dict) to store numbers and their indices.
-For each number num, calculate its complement (target - num).
-Check if the complement is in the dictionary; return the indices if found.
-If not, add the current number and its index to the dictionary.
:: Complexity
Time Complexity: O(n) - Linear time complexity.
Space Complexity: O(n) - Linear space complexity due to the dictionary storage.
